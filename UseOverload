#using multiplication overload:

class Vector:
    def __init__(self, coord: list):
        self.coord = coord

    def __len__(self):
        return len(self.coord)

    def __str__(self):
        return f"Vector({' '.join(map(str, self.coord))})"

    def __mul__(self, other):
        if isinstance(other, Vector):
            new_coord = self.coord.copy()
            for i, item in enumerate(other.coord):
                new_coord[i] *= item
            return Vector(new_coord)
        raise TypeError(f"введен иной тип данных. {self.coord.__class__.__name__} - невозможно сложение с типом {other.__class__.__name__}")
v1 = Vector([1, 3, 4, 5])
v2 = Vector([7, 9, 0, 8])
print(v1 * v2)

#using an overload of multiplication by a number:


 
